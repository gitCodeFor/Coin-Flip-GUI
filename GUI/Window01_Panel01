package GUI;

import Main.Coin;

import javax.swing.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;


public class Window01_Panel01 extends JPanel
{
    private JButton button01;
    private JLabel label01; // result of flip(front ot back)
    private Coin coin01;
    private double flipCounter, frontCounter, backCounter;
    private JLabel label02; // number of flipped
    private JLabel label03; // percentage of flip result

    // Constructor of Panel
    public Window01_Panel01()
    {
        flipCounter = 0;
        frontCounter = 0;
        backCounter = 0;

        coin01 = new Coin();

        button01 = new JButton("Flip once");
        button01.addActionListener(new ButtonListener());

        label01 = new JLabel("Result : None");

        label02 = new JLabel("Number of Flipped : 0");

        label03 = new JLabel("Front : 0 % \t Back : 0 %");

        add(button01);
        add(label01);
        add(label02);
        add(label03);

        setBackground(Color.white);
        setPreferredSize(new Dimension(200, 80));
    }

    // when user click button, run Coin class to flip coin and show result use JLabel
    private class ButtonListener implements ActionListener
    {
        public void actionPerformed(ActionEvent event)
        {
            flipCounter++;

            coin01.flip();
            String result = coin01.getResult();

            frontBackCounter(result);

            label01.setText("Result : " + result);

            label02.setText("Number of Flipped : " + (int)flipCounter);

            //label03.setText("Front : " + ((frontCounter / flipCounter) * 100) + "% \t Back : " + ((backCounter / flipCounter) * 100) + " %");
            label03.setText("Front : " + returnFrontPercentage() + "% \t Back : " + returnBackPercentage() + " %");

        }
    }

    private void frontBackCounter(String result)
    {
        if(result.compareToIgnoreCase("Front side") == 0)
        {
            frontCounter++;
        }
        else if(result.compareToIgnoreCase("Back side") == 0)
        {
            backCounter++;
        }
    }

    private double returnFrontPercentage()
    {
        double frontResult = Math.round((frontCounter / flipCounter) * 100);
        return frontResult;
    }

    private double returnBackPercentage()
    {
        double backResult = Math.round((backCounter / flipCounter) * 100);
        return backResult;
    }
}
